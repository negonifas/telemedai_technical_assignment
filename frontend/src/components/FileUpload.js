import React, { useState } from 'react';
import './FileUpload.css';

const FileUpload = ({ onUploadSuccess }) => {
  const [isUploading, setIsUploading] = useState(false);
  const [message, setMessage] = useState('');
  const [dragOver, setDragOver] = useState(false);

  const handleFileSelect = (file) => {
    if (file && file.name.endsWith('.xlsx')) {
      uploadFile(file);
    } else {
      setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .xlsx');
    }
  };

  const uploadFile = async (file) => {
    setIsUploading(true);
    setMessage('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...');

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch('http://localhost:5001/api/upload', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (response.ok) {
        setMessage(`‚úÖ ${result.message} –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${result.summary.total_questions_processed}`);
        if (onUploadSuccess) {
          onUploadSuccess(result);
        }
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        let errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${result.error}`;
        
        if (result.duplicate_question_ids) {
          errorMessage += `\nüîç –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID: ${result.duplicate_question_ids.join(', ')}`;
        }
        
        if (result.duplicate_rows) {
          errorMessage += `\nüìç –°—Ç—Ä–æ–∫–∏ —Å –¥—É–±–ª—è–º–∏: ${result.duplicate_rows.join(', ')}`;
        }
        
        if (result.empty_rows) {
          errorMessage += `\nüìç –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: ${result.empty_rows.join(', ')}`;
        }
        
        setMessage(errorMessage);
      }
    } catch (error) {
      setMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
    } finally {
      setIsUploading(false);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragOver(false);
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleInputChange = (e) => {
    const files = e.target.files;
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  return (
    <div className="file-upload">
      <h3>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</h3>
      
      <div 
        className={`upload-area ${dragOver ? 'drag-over' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <div className="upload-content">
          <p>üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ .xlsx —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏</p>
          <label className="file-input-label">
            <input
              type="file"
              accept=".xlsx"
              onChange={handleInputChange}
              disabled={isUploading}
              className="file-input"
            />
            <span className="file-button">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</span>
          </label>
        </div>
      </div>

      {message && (
        <div className={`message ${message.includes('‚ùå') ? 'error' : 'success'}`}>
          {message}
        </div>
      )}

      {isUploading && (
        <div className="loading">
          <div className="spinner"></div>
          <span>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...</span>
        </div>
      )}
    </div>
  );
};

export default FileUpload;
